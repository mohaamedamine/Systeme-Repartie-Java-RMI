import java.rmi.*;
import java.rmi.registry.*;
import java.util.Scanner;

public class Client {
	public Client(String[] args) {
		try {
			if (System.getSecurityManager() == null)
				System.setSecurityManager(new SecurityManager());

			Registry reg = LocateRegistry.getRegistry("localhost", 1099);

			FabObjectInterface fabrique = (FabObjectInterface) reg.lookup("Fabrique");

			ObjectInterface Obj1;
			Obj1 = (ObjectInterface) fabrique.newObject();

			ObjectInterface Obj2;
			Obj2 = (ObjectInterface) fabrique.newObject();

			ObjectInterface Obj3;
			Obj3 = (ObjectInterface) fabrique.newObject();

			ObjectInterface Obj4;
			Obj4 = (ObjectInterface) fabrique.newObject();

			ClientDecomposer c = new ClientDecomposer();

			int t[] = new int[8];
			int nL1 = 0;
			int nC1 = 0;
			int nC2 = 0;
			
			Scanner s = new Scanner(System.in);
			System.out.println("\n********************************** Matrice 1 **********************************\n");
			System.out.println("Donner le nbre de lignes de m1 : ");
			nL1 = s.nextInt();
			System.out.println("Donner le nbre de colonnes de m1 : ");
			nC1 = s.nextInt();
			Matrice m1 = new Matrice(nL1, nC1);

			System.out.println("Remplir la première matrice : ");
			m1.remplir(nL1, nC1);

			System.out.println("\n********************************** Matrice 2 **********************************\n");
			System.out.println("Le nbre de ligne de m2 est deja fixé : " + m1.getNbCol());
			System.out.println("Donner le nbre de colonnes de m2 : ");
			nC2 = s.nextInt();
			Matrice m2 = new Matrice(nC1, nC2);
			System.out.println("Remplir la deuxième matrice : ");
			m2.remplir(nC1, nC2);

			System.out.println("\n********************************** Matrice 1 **********************************\n");
			m1.afficher();
			
			/*System.out.println("\n********************************** Matrice 2 **********************************\n");
			m2.afficher();

			Matrice matrices[] = new Matrice[8];

			for (int i = 0; i < 8; i++) {
				matrices[i] = new Matrice();
			}

			c.decomposerMat1(m1, matrices[0], matrices[1], matrices[2], matrices[3], t);

			matrices[0].afficher();

			// c.decomposerMat1(m2, matrices[4], matrices[5], matrices[6], matrices[7],t);

			/*
			 * for(int i=0;i<8;i++) {
			 * System.out.println("sous mat ["+(i+1)+"]"+matrices[i]); }
			 */

			/*
			 * Matrice subMatResult[] = new Matrice[3]; for(int i=0;i<8;i++) {
			 * subMatResult[i] = new Matrice(); }
			 * 
			 * subMatResult[0] =
			 * Obj1.produit(matrices[0],matrices[4],matrices[1],matrices[6]);
			 * subMatResult[1] =
			 * Obj2.produit(matrices[0],matrices[6],matrices[1],matrices[7]);
			 * subMatResult[2] =
			 * Obj3.produit(matrices[2],matrices[4],matrices[3],matrices[6]);
			 * subMatResult[3] =
			 * Obj4.produit(matrices[2],matrices[5],matrices[3],matrices[7]);
			 * 
			 * Matrice result=new Matrice(); result =
			 * c.Ramasser(subMatResult[0],subMatResult[1],subMatResult[2],subMatResult[3]);
			 * System.out.println("resultat"); result.afficher();
			 */

		} catch (Exception e) {
			System.out.println("Erreur d'acces a l'objet distant.");
			System.out.println(e.toString());
		}
	}
}
